name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          pytest --junitxml=test-results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

      - name: Run Coverage Unit Tests
        run: |
          coverage run --source=app -m pytest
          coverage report -m
          coverage html

      - name: Upload Coverage Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-results
          path: htmlcov/*


      - name: Set Docker Tag
        id: docker_tag
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=develop" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/${REPO_LOWER}:${{ steps.docker_tag.outputs.tag }} .

      - name: Push Docker image
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_LOWER}:${{ steps.docker_tag.outputs.tag }}
