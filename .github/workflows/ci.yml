name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: |
          pytest --junitxml=test-results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results.xml

      - name: Run Coverage Unit Tests
        run: |
          coverage run --source=app -m pytest
          coverage report -m
          coverage xml
          coverage html

      - name: Upload Coverage Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-results
          path: |
            htmlcov/*
            coverage.xml

      - name: Set SonarCloud variables
        id: sonar
        run: |
          echo "organization=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}" >> $GITHUB_OUTPUT

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.xunit.reportPath=test-results.xml
            -Dsonar.projectKey=${{ steps.sonar.outputs.projectKey }}
            -Dsonar.organization=${{ steps.sonar.outputs.organization }}
            -Dsonar.coverage.exclusions=**/__init__.py,**/app.py
            -Dsonar.test.inclusions=**/test_*.py
            -Dsonar.sources=app
            -Dsonar.tests=tests
            -Dsonar.python.coverage.overallReportPaths=coverage.xml
            -Dsonar.python.coverage.utReportPaths=coverage.xml

      - name: Set Docker Tag
        id: docker_tag
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=develop" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/${REPO_LOWER}:${{ steps.docker_tag.outputs.tag }} .

      - name: Push Docker image
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/${REPO_LOWER}:${{ steps.docker_tag.outputs.tag }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Tag Docker image for GCP
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            docker tag ghcr.io/${REPO_LOWER}:${{ steps.docker_tag.outputs.tag }} us-central1-docker.pkg.dev/misw4501/inventory-repo/inventory-service:latest
          else
            docker tag ghcr.io/${REPO_LOWER}:${{ steps.docker_tag.outputs.tag }} us-central1-docker.pkg.dev/misw4501/inventory-repo/inventory-service:develop
          fi

      - name: Push Docker image to GCP
        run: |
          REPO_LOWER=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            docker push us-central1-docker.pkg.dev/misw4501/inventory-repo/inventory-service:latest
          else
            docker push us-central1-docker.pkg.dev/misw4501/inventory-repo/inventory-service:develop
          fi
